--------------------
./configure --static --prefix=/usr/local/vitasdk/arm-vita-eabi
30 Dec 2016 03:36:37
Using arm-vita-eabi-gcc-ar
Using arm-vita-eabi-gcc-ranlib
Using arm-vita-eabi-nm
Checking for arm-vita-eabi-gcc...
=== ztest13408.c ===
extern int getchar();
int hello() {return getchar();}
===
arm-vita-eabi-gcc -c ztest13408.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest13408.c ===
int foo() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest13408.c

Building static library libz.a version 1.2.8 with arm-vita-eabi-gcc.

=== ztest13408.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -D_LARGEFILE64_SOURCE=1 ztest13408.c
ztest13408.c:2:1: error: unknown type name 'off64_t'
 off64_t dummy = 0;
 ^~~~~~~
(exit code 1)
Checking for off64_t... No.

=== ztest13408.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest13408 ztest13408.c
ztest13408.c: In function 'main':
ztest13408.c:3:3: warning: implicit declaration of function 'fseeko' [-Wimplicit-function-declaration]
   fseeko(NULL, 0, 0);
   ^~~~~~
Checking for fseeko... Yes.

=== ztest13408.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest13408 ztest13408.c
Checking for strerror... Yes.

=== ztest13408.c ===
#include <unistd.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest13408.c
Checking for unistd.h... Yes.

=== ztest13408.c ===
#include <stdarg.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest13408.c
Checking for stdarg.h... Yes.

=== ztest13408.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest13408.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest13408.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest13408 ztest13408.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest13408.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest13408.c
Checking for return value of vsnprintf()... Yes.

=== ztest13408.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest13408.c
Checking for attribute(visibility) support... Yes.

ALL = static
AR = arm-vita-eabi-gcc-ar
ARFLAGS = rc
CC = arm-vita-eabi-gcc
CFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -DHAVE_HIDDEN
CPP = arm-vita-eabi-gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -L/usr/local/vitasdk/arm-vita-eabi/lib
LDSHARED = arm-vita-eabi-gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = arm-vita-eabi-gcc-ranlib
SFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local/vitasdk/arm-vita-eabi
sharedlibdir = ${libdir}
uname = eabi
--------------------


--------------------
./configure --static --prefix=/usr/local/vitasdk/arm-vita-eabi
30 Dec 2016 03:36:54
Using arm-vita-eabi-gcc-ar
Using arm-vita-eabi-gcc-ranlib
Using arm-vita-eabi-nm
Checking for arm-vita-eabi-gcc...
=== ztest15396.c ===
extern int getchar();
int hello() {return getchar();}
===
arm-vita-eabi-gcc -c ztest15396.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest15396.c ===
int foo() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest15396.c

Building static library libz.a version 1.2.8 with arm-vita-eabi-gcc.

=== ztest15396.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -D_LARGEFILE64_SOURCE=1 ztest15396.c
ztest15396.c:2:1: error: unknown type name 'off64_t'
 off64_t dummy = 0;
 ^~~~~~~
(exit code 1)
Checking for off64_t... No.

=== ztest15396.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest15396 ztest15396.c
ztest15396.c: In function 'main':
ztest15396.c:3:3: warning: implicit declaration of function 'fseeko' [-Wimplicit-function-declaration]
   fseeko(NULL, 0, 0);
   ^~~~~~
Checking for fseeko... Yes.

=== ztest15396.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest15396 ztest15396.c
Checking for strerror... Yes.

=== ztest15396.c ===
#include <unistd.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest15396.c
Checking for unistd.h... Yes.

=== ztest15396.c ===
#include <stdarg.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest15396.c
Checking for stdarg.h... Yes.

=== ztest15396.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest15396.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest15396.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest15396 ztest15396.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest15396.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest15396.c
Checking for return value of vsnprintf()... Yes.

=== ztest15396.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest15396.c
Checking for attribute(visibility) support... Yes.

ALL = static
AR = arm-vita-eabi-gcc-ar
ARFLAGS = rc
CC = arm-vita-eabi-gcc
CFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -DHAVE_HIDDEN
CPP = arm-vita-eabi-gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -L/usr/local/vitasdk/arm-vita-eabi/lib
LDSHARED = arm-vita-eabi-gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = arm-vita-eabi-gcc-ranlib
SFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local/vitasdk/arm-vita-eabi
sharedlibdir = ${libdir}
uname = eabi
--------------------


--------------------
./configure --static --prefix=/usr/local/vitasdk/arm-vita-eabi
30 Dec 2016 03:40:01
Using arm-vita-eabi-gcc-ar
Using arm-vita-eabi-gcc-ranlib
Using arm-vita-eabi-nm
Checking for arm-vita-eabi-gcc...
=== ztest2572.c ===
extern int getchar();
int hello() {return getchar();}
===
arm-vita-eabi-gcc -c ztest2572.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2572.c ===
int foo() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest2572.c

Building static library libz.a version 1.2.8 with arm-vita-eabi-gcc.

=== ztest2572.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -D_LARGEFILE64_SOURCE=1 ztest2572.c
ztest2572.c:2:1: error: unknown type name 'off64_t'
 off64_t dummy = 0;
 ^~~~~~~
(exit code 1)
Checking for off64_t... No.

=== ztest2572.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest2572 ztest2572.c
ztest2572.c: In function 'main':
ztest2572.c:3:3: warning: implicit declaration of function 'fseeko' [-Wimplicit-function-declaration]
   fseeko(NULL, 0, 0);
   ^~~~~~
Checking for fseeko... Yes.

=== ztest2572.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest2572 ztest2572.c
Checking for strerror... Yes.

=== ztest2572.c ===
#include <unistd.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest2572.c
Checking for unistd.h... Yes.

=== ztest2572.c ===
#include <stdarg.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest2572.c
Checking for stdarg.h... Yes.

=== ztest2572.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest2572.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2572.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest2572 ztest2572.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2572.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest2572.c
Checking for return value of vsnprintf()... Yes.

=== ztest2572.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest2572.c
Checking for attribute(visibility) support... Yes.

ALL = static
AR = arm-vita-eabi-gcc-ar
ARFLAGS = rc
CC = arm-vita-eabi-gcc
CFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -DHAVE_HIDDEN
CPP = arm-vita-eabi-gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -L/usr/local/vitasdk/arm-vita-eabi/lib
LDSHARED = arm-vita-eabi-gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = arm-vita-eabi-gcc-ranlib
SFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local/vitasdk/arm-vita-eabi
sharedlibdir = ${libdir}
uname = eabi
--------------------


--------------------
./configure --static --prefix=/usr/local/vitasdk/arm-vita-eabi
30 Dec 2016 03:47:29
Using arm-vita-eabi-gcc-ar
Using arm-vita-eabi-gcc-ranlib
Using arm-vita-eabi-nm
Checking for arm-vita-eabi-gcc...
=== ztest11784.c ===
extern int getchar();
int hello() {return getchar();}
===
arm-vita-eabi-gcc -c ztest11784.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest11784.c ===
int foo() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest11784.c

Building static library libz.a version 1.2.8 with arm-vita-eabi-gcc.

=== ztest11784.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -D_LARGEFILE64_SOURCE=1 ztest11784.c
ztest11784.c:2:1: error: unknown type name 'off64_t'
 off64_t dummy = 0;
 ^~~~~~~
(exit code 1)
Checking for off64_t... No.

=== ztest11784.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest11784 ztest11784.c
ztest11784.c: In function 'main':
ztest11784.c:3:3: warning: implicit declaration of function 'fseeko' [-Wimplicit-function-declaration]
   fseeko(NULL, 0, 0);
   ^~~~~~
Checking for fseeko... Yes.

=== ztest11784.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest11784 ztest11784.c
Checking for strerror... Yes.

=== ztest11784.c ===
#include <unistd.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest11784.c
Checking for unistd.h... Yes.

=== ztest11784.c ===
#include <stdarg.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest11784.c
Checking for stdarg.h... Yes.

=== ztest11784.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest11784.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest11784.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest11784 ztest11784.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest11784.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest11784.c
Checking for return value of vsnprintf()... Yes.

=== ztest11784.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest11784.c
Checking for attribute(visibility) support... Yes.

ALL = static
AR = arm-vita-eabi-gcc-ar
ARFLAGS = rc
CC = arm-vita-eabi-gcc
CFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -DHAVE_HIDDEN
CPP = arm-vita-eabi-gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -L/usr/local/vitasdk/arm-vita-eabi/lib
LDSHARED = arm-vita-eabi-gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = arm-vita-eabi-gcc-ranlib
SFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local/vitasdk/arm-vita-eabi
sharedlibdir = ${libdir}
uname = eabi
--------------------


--------------------
./configure --static --prefix=/usr/local/vitasdk/arm-vita-eabi
30 Dec 2016 04:13:51
Using arm-vita-eabi-gcc-ar
Using arm-vita-eabi-gcc-ranlib
Using arm-vita-eabi-nm
Checking for arm-vita-eabi-gcc...
=== ztest17024.c ===
extern int getchar();
int hello() {return getchar();}
===
arm-vita-eabi-gcc -c ztest17024.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest17024.c ===
int foo() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest17024.c

Building static library libz.a version 1.2.8 with arm-vita-eabi-gcc.

=== ztest17024.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -D_LARGEFILE64_SOURCE=1 ztest17024.c
ztest17024.c:2:1: error: unknown type name 'off64_t'
 off64_t dummy = 0;
 ^~~~~~~
(exit code 1)
Checking for off64_t... No.

=== ztest17024.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest17024 ztest17024.c
ztest17024.c: In function 'main':
ztest17024.c:3:3: warning: implicit declaration of function 'fseeko' [-Wimplicit-function-declaration]
   fseeko(NULL, 0, 0);
   ^~~~~~
Checking for fseeko... Yes.

=== ztest17024.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest17024 ztest17024.c
Checking for strerror... Yes.

=== ztest17024.c ===
#include <unistd.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest17024.c
Checking for unistd.h... Yes.

=== ztest17024.c ===
#include <stdarg.h>
int main() { return 0; }
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest17024.c
Checking for stdarg.h... Yes.

=== ztest17024.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest17024.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest17024.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -o ztest17024 ztest17024.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest17024.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest17024.c
Checking for return value of vsnprintf()... Yes.

=== ztest17024.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
arm-vita-eabi-gcc -c -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math ztest17024.c
Checking for attribute(visibility) support... Yes.

ALL = static
AR = arm-vita-eabi-gcc-ar
ARFLAGS = rc
CC = arm-vita-eabi-gcc
CFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -DHAVE_HIDDEN
CPP = arm-vita-eabi-gcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS = -L/usr/local/vitasdk/arm-vita-eabi/lib
LDSHARED = arm-vita-eabi-gcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = arm-vita-eabi-gcc-ranlib
SFLAGS = -std=c99 -ftree-vectorize -O3 -ffat-lto-objects -flto -mword-relocations -fomit-frame-pointer -ffast-math -fPIC -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local/vitasdk/arm-vita-eabi
sharedlibdir = ${libdir}
uname = eabi
--------------------


